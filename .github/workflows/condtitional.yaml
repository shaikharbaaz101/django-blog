name: master_provider_deploy

on:
  workflow_dispatch:
    inputs:
      project:
        description: 'Project Name'
        required: true
        type: choice
        options:
          - aci
          - mips
      databricks-workspace:
        description: 'Target DMI Databricks workspace'
        required: true
        type: choice
        options:
          - qa
          - qa_cp
          - uat
          - uat_cp
          - prod

jobs:
  deploy-aci:
    if: ${{ github.event.inputs.project == 'aci' }}
    runs-on: ubuntu-latest
    environment: qa
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install Databricks CLI
        uses: databricks/setup-cli@main
      - name: Deploy workflows
        run: |
          echo "Im at aci job section"
          project_selection=${{ github.event.inputs.project }}
          env=${{ github.event.inputs.databricks-workspace }}
          if [ "$env" == "qa" ]; then
              # export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_QA_PROVIDER }}
              # databricks bundle validate -t qa
              # databricks bundle deploy -t qa
              echo "at aci qa"
          elif [ "$env" == "qa_cp" ]; then
              # export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_QA_PROVIDER_CP }}
              # databricks bundle validate -t qa_cp
              # databricks bundle deploy -t qa_cp
              echo "at aci qa_cp"
          elif [ "$env" == "uat" ]; then
              # export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_UAT_PROVIDER }}
              # databricks bundle validate -t uat
              # databricks bundle deploy -t uat
              echo "at aci uat"
          elif [ "$env" == "uat_cp" ]; then
              # export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_UAT_PROVIDER_CP }}
              # databricks bundle validate -t uat_cp
              # databricks bundle deploy -t uat_cp
              echo "at aci uat_cp"
          elif [ "$env" == "prod" ]; then
              # export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_PROD_PROVIDER }}
              # databricks bundle validate -t prod
              # databricks bundle deploy -t prod
              echo "at aci prod"
          else
              echo "TO BE SETUP"
          fi

  deploy-mips:
    if: ${{ github.event.inputs.project == 'mips' }}
    runs-on: ubuntu-latest
    environment: uat
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install Databricks CLI
        uses: databricks/setup-cli@main
      - name: Deploy workflows
        run: |
          echo "Im at mips job section"
          project_selection=${{ github.event.inputs.project }}
          env=${{ github.event.inputs.databricks-workspace }}
          if [ "$env" == "qa" ]; then
              # export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_QA_PROVIDER }}
              # databricks bundle validate -t qa
              # databricks bundle deploy -t qa
              echo "at mips qa"
          elif [ "$env" == "qa_cp" ]; then
              # export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_QA_PROVIDER_CP }}
              # databricks bundle validate -t qa_cp
              # databricks bundle deploy -t qa_cp
              echo "at mips qa_cp"
          elif [ "$env" == "uat" ]; then
              # export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_UAT_PROVIDER }}
              # databricks bundle validate -t uat
              # databricks bundle deploy -t uat
              echo "at mips uat"
          elif [ "$env" == "uat_cp" ]; then
              # export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_UAT_PROVIDER_CP }}
              # databricks bundle validate -t uat_cp
              # databricks bundle deploy -t uat_cp
              echo "at mips uat_cp"
          elif [ "$env" == "prod" ]; then
              # export DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN_PROD_PROVIDER }}
              # databricks bundle validate -t prod
              # databricks bundle deploy -t prod
              echo "at mips prod"
          else
              echo "TO BE SETUP"
          fi
